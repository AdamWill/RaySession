import locale
import os
import shutil
import subprocess
import sys
import time
from PyQt5.QtCore import QProcess, QProcessEnvironment

import ray

def gitStringer(string):
    for char in (' ', '*', '?'):
        string = string.replace(char, "\\" + char)
      
    for char in ('#', '!'):
        if string.startswith(char):
            string = "\\" + string

    return string
    
    
class Snapshoter:
    def __init__(self, session):
        self.session = session
        self.gitname = '.git'
        #self.gitdir  = '.ray-snapshots'
        self.exclude_path = 'info/exclude'
        self.max_file_size = 50 #in Mb
        #process_env = QProcessEnvironment.systemEnvironment()
        #process_env.insert('NSM_URL', self.getServerUrl())
        
        #self.process = QProcess()
        #self.process.setProcessEnvironment(process_env)
        
    def getGitDir(self):
        if not self.session.path:
            raise NameError("attempting to save with no session path !!!")
        
        return "%s/%s" % (self.session.path, self.gitname)
    
    def runGit(self, *args):
        gitdir = self.getGitDir()
        if not gitdir:
            return 
        
        subprocess.run(self.getGitCommandList(*args))
    
    def getGitCommandList(self, *args):
        gitdir = self.getGitDir()
        if not gitdir:
            return []
        
        return ['git', '-C' , self.session.path] + list(args)
    
    def list(self):
        gitdir = self.getGitDir()
        if not gitdir:
            return []
        
        all_list = subprocess.check_output(self.getGitCommandList('tag'))
        all_list_utf = all_list.decode()
        all_tags = all_list_utf.split('\n')
        
        if len(all_tags) >= 1:
            if not all_tags[-1]:
                all_tags = all_tags[:-1]
        
        if len(all_tags) >= 1:
            if all_tags[-1] == 'list':
                all_tags = all_tags[:-1]
        
        return all_tags.__reversed__()
    
    def initSession(self):
        gitdir = self.getGitDir()
        if not gitdir:
            return
        
        print('gitdir', gitdir)
        
        if os.path.exists(gitdir):
            return
        
        print('gitdir2')
        
        self.runGit('init')
        
    def excludeUndesired(self):
        if not self.session.path:
            return
        
        exclude_path = "%s/.git/info/exclude" % self.session.path
        exclude_file = open(exclude_path, 'w')
        
        contents = ""
        for extension in ('wav', 'peak', 'flac', 'ogg', 'mp3', 'midi', 'mid'
                          'avi', 'mp4'):
            contents += "*.%s\n" % extension
        
        contents += '\n'
        
        big_files_all = subprocess.check_output(['find', self.session.path,
                                                 '-size', '+50M'])
        big_files_utf = big_files_all.decode()
        contents += big_files_utf
        
        exclude_file.write(contents)
        exclude_file.close()
    
    def getTagDate(self):
        date = time.localtime()
        tagdate = "%s_%s_%s_%s_%s_%s" % (
                    date.tm_year, date.tm_mon, date.tm_mday,
                    date.tm_hour, date.tm_min, date.tm_sec)
        
        return tagdate
    
    def readExcludeFile(self):
        try:
            file = open("%s/%s/info/exclude", 'r')
        except:
            return 
        
        contents = file.read()
        
        all_lines = []
        
        for line in contents.split('\n'):
            if not line:
                continue
            
            if line.startswith(('#', ' ')):
                continue
            
            all_lines.append(line)
    
    def writeExcludeFile(self):
        file_path = "%s/%s/info/exclude" % (self.session.path, self.gitname)
        
        try:
            exclude_file = open(file_path, 'w')
        except:
            sys.stderr.write(
                "impossible to open %s for writing.\n" % file_path)
            raise
        
        contents = ""
        contents += "# This file is generated by ray-daemon at each snapshot\n"
        contents += "# Don't edit this file.\n"
        contents += "# If you want to add/remove files managed by git\n"
        contents += "# Edit .gitignore in the session folder\n"
        contents += "\n"
        contents += "# Globally ignored extensions\n"
        
        session_ignored_extensions = ray.getGitIgnoredExtensions()
        session_ign_list = session_ignored_extensions.split(' ')
        session_ign_list = tuple(filter(bool, session_ign_list))
        
        # write global ignored extensions
        for extension in session_ign_list:
            contents+= "*%s\n" % extension 
            
            for client in self.session.clients:
                cext_list = client.git_ignored_extensions.split(' ')
                if not extension in cext_list:
                    contents += "!%s.%s/**/*%s\n" % (
                        gitStringer(client.getPrefixString()),
                        gitStringer(client.client_id),
                        extension)
                    contents += "!%s.%s.**/*%s\n" % (
                        gitStringer(client.getPrefixString()),
                        gitStringer(client.client_id),
                        extension)
                    
        contents += '\n'
        contents += "# Extensions ignored by clients\n"
        
        
        # write client specific ignored extension
        for client in self.session.clients:
            cext_list = client.git_ignored_extensions.split(' ')
            for extension in cext_list:
                if not extension:
                    continue
                
                if extension in session_ignored_extensions:
                    continue
                
                contents += "%s.%s/**/*%s\n" % (
                    gitStringer(client.getPrefixString()), 
                    gitStringer(client.client_id),
                    extension)
                
                contents += "%s.%s.**/*%s\n" % (
                    gitStringer(client.getPrefixString()), 
                    gitStringer(client.client_id),
                    extension)
        
        contents += '\n'
        contents += "# Too big Files\n"
        
        no_check_list = (self.gitname)
        # check too big files
        for foldername, subfolders, filenames in os.walk(self.session.path):
            subfolders[:] = [d for d in subfolders if d not in no_check_list]
            
            if foldername == "%s/%s" % (self.session.path, self.gitname):
                continue
            
            
            for filename in filenames:
                if filename.endswith(session_ign_list):
                    # file with extension globally ignored but
                    # unignored by its client will not be ignored
                    # and that is well as this.
                    continue
                        
                try:
                    file_size = os.path.getsize(os.path.join(foldername,
                                                             filename))
                except:
                    continue
                
                if file_size > self.max_file_size*1024**2:
                    if foldername == self.session.path:
                        line = gitStringer(filename)
                    else:
                        short_folder = foldername.replace(
                                        self.session.path + '/', '', 1)
                        line = gitStringer("%s/%s" % (short_folder, filename))
                        
                    contents += "%s\n" % line
        
        exclude_file.write(contents)
        exclude_file.close()
        
        
    def save(self, name=''):
        snapshot_name = self.getTagDate()
        if name:
            snapshot_name = "%s_%s" % (snapshot_name, name)
            
        self.writeExcludeFile()
        
        subprocess.run(['ray-snapshot', self.session.path, snapshot_name])
        
        if self.session.hasServer():
            self.session.sendGui('/reply_snapshots_list', snapshot_name)
        
    def load(self, spath, snapshot):
        tag_for_last = "%s,%s" % (self.getTagDate(), snapshot)
        subprocess.run(['git', '-C', spath, 'tag', '-a', tag_for_last, '-m' 'ray'])
        
        print('reload snapshot')
        subprocess.run(['git', '-C', spath, 'checkout', snapshot])
        print('snapshot reloadded')
