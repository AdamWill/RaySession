# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'resources/ui/ray_hack_properties.ui'
#
# Created by: PyQt5 UI code generator 5.11.3
#
# WARNING! All changes made in this file will be lost!

from PyQt5 import QtCore, QtGui, QtWidgets

class Ui_Frame(object):
    def setupUi(self, Frame):
        Frame.setObjectName("Frame")
        Frame.resize(428, 585)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(Frame)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.groupBox_5 = QtWidgets.QGroupBox(Frame)
        self.groupBox_5.setTitle("")
        self.groupBox_5.setObjectName("groupBox_5")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.groupBox_5)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.label_17 = QtWidgets.QLabel(self.groupBox_5)
        self.label_17.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_17.setObjectName("label_17")
        self.gridLayout_3.addWidget(self.label_17, 2, 0, 1, 1)
        self.label_16 = QtWidgets.QLabel(self.groupBox_5)
        self.label_16.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_16.setObjectName("label_16")
        self.gridLayout_3.addWidget(self.label_16, 3, 0, 1, 1)
        self.label_18 = QtWidgets.QLabel(self.groupBox_5)
        self.label_18.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_18.setObjectName("label_18")
        self.gridLayout_3.addWidget(self.label_18, 4, 0, 1, 1)
        self.labelWorkingDirTitle = QtWidgets.QLabel(self.groupBox_5)
        self.labelWorkingDirTitle.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.labelWorkingDirTitle.setObjectName("labelWorkingDirTitle")
        self.gridLayout_3.addWidget(self.labelWorkingDirTitle, 1, 0, 1, 1)
        self.lineEditArguments = QtWidgets.QLineEdit(self.groupBox_5)
        self.lineEditArguments.setObjectName("lineEditArguments")
        self.gridLayout_3.addWidget(self.lineEditArguments, 4, 1, 1, 5)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.lineEditConfigFile = QtWidgets.QLineEdit(self.groupBox_5)
        self.lineEditConfigFile.setObjectName("lineEditConfigFile")
        self.horizontalLayout_2.addWidget(self.lineEditConfigFile)
        self.toolButtonBrowse = QtWidgets.QToolButton(self.groupBox_5)
        icon = QtGui.QIcon.fromTheme("folder-open")
        self.toolButtonBrowse.setIcon(icon)
        self.toolButtonBrowse.setToolButtonStyle(QtCore.Qt.ToolButtonTextBesideIcon)
        self.toolButtonBrowse.setObjectName("toolButtonBrowse")
        self.horizontalLayout_2.addWidget(self.toolButtonBrowse)
        self.gridLayout_3.addLayout(self.horizontalLayout_2, 3, 1, 1, 5)
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.toolButtonIcon = FakeToolButton(self.groupBox_5)
        self.toolButtonIcon.setBaseSize(QtCore.QSize(48, 48))
        self.toolButtonIcon.setStyleSheet("QToolButton{border:none}")
        icon = QtGui.QIcon.fromTheme("application-pdf")
        self.toolButtonIcon.setIcon(icon)
        self.toolButtonIcon.setIconSize(QtCore.QSize(48, 48))
        self.toolButtonIcon.setObjectName("toolButtonIcon")
        self.gridLayout.addWidget(self.toolButtonIcon, 0, 0, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout.addItem(spacerItem, 1, 0, 1, 1)
        self.gridLayout_3.addLayout(self.gridLayout, 1, 5, 2, 1)
        self.lineEditExecutable = QtWidgets.QLineEdit(self.groupBox_5)
        self.lineEditExecutable.setObjectName("lineEditExecutable")
        self.gridLayout_3.addWidget(self.lineEditExecutable, 2, 1, 1, 4)
        self.labelWorkingDir = QtWidgets.QLabel(self.groupBox_5)
        self.labelWorkingDir.setObjectName("labelWorkingDir")
        self.gridLayout_3.addWidget(self.labelWorkingDir, 1, 1, 1, 4)
        self.verticalLayout_2.addWidget(self.groupBox_5)
        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_2.addItem(spacerItem1)
        self.groupBox_6 = QtWidgets.QGroupBox(Frame)
        self.groupBox_6.setTitle("")
        self.groupBox_6.setObjectName("groupBox_6")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.groupBox_6)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.checkBoxWaitWindow = QtWidgets.QCheckBox(self.groupBox_6)
        self.checkBoxWaitWindow.setObjectName("checkBoxWaitWindow")
        self.gridLayout_4.addWidget(self.checkBoxWaitWindow, 3, 0, 1, 3)
        self.label_19 = QtWidgets.QLabel(self.groupBox_6)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_19.sizePolicy().hasHeightForWidth())
        self.label_19.setSizePolicy(sizePolicy)
        self.label_19.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_19.setObjectName("label_19")
        self.gridLayout_4.addWidget(self.label_19, 1, 0, 1, 1)
        self.label_20 = QtWidgets.QLabel(self.groupBox_6)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_20.sizePolicy().hasHeightForWidth())
        self.label_20.setSizePolicy(sizePolicy)
        self.label_20.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_20.setObjectName("label_20")
        self.gridLayout_4.addWidget(self.label_20, 0, 0, 1, 1)
        self.comboSaveSig = QtWidgets.QComboBox(self.groupBox_6)
        self.comboSaveSig.setObjectName("comboSaveSig")
        self.gridLayout_4.addWidget(self.comboSaveSig, 0, 1, 1, 1)
        self.comboStopSig = QtWidgets.QComboBox(self.groupBox_6)
        self.comboStopSig.setObjectName("comboStopSig")
        self.gridLayout_4.addWidget(self.comboStopSig, 1, 1, 1, 1)
        self.verticalLayout_2.addWidget(self.groupBox_6)
        spacerItem2 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_2.addItem(spacerItem2)
        self.groupBoxNoSave = QtWidgets.QGroupBox(Frame)
        self.groupBoxNoSave.setObjectName("groupBoxNoSave")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.groupBoxNoSave)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.checkBoxTellUser = QtWidgets.QCheckBox(self.groupBoxNoSave)
        self.checkBoxTellUser.setObjectName("checkBoxTellUser")
        self.verticalLayout_3.addWidget(self.checkBoxTellUser)
        self.checkBoxCloseGracefully = QtWidgets.QCheckBox(self.groupBoxNoSave)
        self.checkBoxCloseGracefully.setObjectName("checkBoxCloseGracefully")
        self.verticalLayout_3.addWidget(self.checkBoxCloseGracefully)
        self.verticalLayout_2.addWidget(self.groupBoxNoSave)
        spacerItem3 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_2.addItem(spacerItem3)
        self.groupBoxTestZone = QtWidgets.QGroupBox(Frame)
        self.groupBoxTestZone.setCheckable(True)
        self.groupBoxTestZone.setChecked(True)
        self.groupBoxTestZone.setObjectName("groupBoxTestZone")
        self.verticalLayout_13 = QtWidgets.QVBoxLayout(self.groupBoxTestZone)
        self.verticalLayout_13.setObjectName("verticalLayout_13")
        self.frameTestZone = QtWidgets.QFrame(self.groupBoxTestZone)
        self.frameTestZone.setStyleSheet("QFrame{border:None}")
        self.frameTestZone.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frameTestZone.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frameTestZone.setObjectName("frameTestZone")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.frameTestZone)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setSpacing(6)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem4)
        self.pushButtonStart = QtWidgets.QPushButton(self.frameTestZone)
        icon = QtGui.QIcon.fromTheme("media-playback-start")
        self.pushButtonStart.setIcon(icon)
        self.pushButtonStart.setObjectName("pushButtonStart")
        self.horizontalLayout_4.addWidget(self.pushButtonStart)
        self.pushButtonStop = QtWidgets.QPushButton(self.frameTestZone)
        icon = QtGui.QIcon.fromTheme("media-playback-stop")
        self.pushButtonStop.setIcon(icon)
        self.pushButtonStop.setObjectName("pushButtonStop")
        self.horizontalLayout_4.addWidget(self.pushButtonStop)
        self.lineEditClientStatus = StatusBar(self.frameTestZone)
        self.lineEditClientStatus.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEditClientStatus.sizePolicy().hasHeightForWidth())
        self.lineEditClientStatus.setSizePolicy(sizePolicy)
        self.lineEditClientStatus.setMaximumSize(QtCore.QSize(60, 28))
        font = QtGui.QFont()
        font.setFamily("Serif")
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.lineEditClientStatus.setFont(font)
        self.lineEditClientStatus.setFrame(True)
        self.lineEditClientStatus.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEditClientStatus.setReadOnly(True)
        self.lineEditClientStatus.setObjectName("lineEditClientStatus")
        self.horizontalLayout_4.addWidget(self.lineEditClientStatus)
        self.pushButtonSave = QtWidgets.QPushButton(self.frameTestZone)
        icon = QtGui.QIcon.fromTheme("document-save")
        self.pushButtonSave.setIcon(icon)
        self.pushButtonSave.setObjectName("pushButtonSave")
        self.horizontalLayout_4.addWidget(self.pushButtonSave)
        spacerItem5 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem5)
        self.horizontalLayout.addLayout(self.horizontalLayout_4)
        self.verticalLayout_13.addWidget(self.frameTestZone)
        self.labelError = QtWidgets.QLabel(self.groupBoxTestZone)
        self.labelError.setStyleSheet("color: red")
        self.labelError.setAlignment(QtCore.Qt.AlignCenter)
        self.labelError.setObjectName("labelError")
        self.verticalLayout_13.addWidget(self.labelError)
        self.verticalLayout_2.addWidget(self.groupBoxTestZone)

        self.retranslateUi(Frame)
        QtCore.QMetaObject.connectSlotsByName(Frame)

    def retranslateUi(self, Frame):
        _translate = QtCore.QCoreApplication.translate
        Frame.setWindowTitle(_translate("Frame", "Frame"))
        self.groupBox_5.setToolTip(_translate("Frame", "<html><head/><body><p>here many fields are available to you. This is not necessarily good news, the idea is to be able to load a program into the session that is not (yet) compatible with NSM. If properly implemented in the client, the NSM protocol will always be much more comfortable to use and more reliable than this hack. That said, if we can expect the NSM implementation in all audio programs, this is not the case for other programs which can still be useful in the session.</p><p><br/></p><p>The Ray-Hack pseudo-protocol uses the attributes of proxies (nsm-proxy or ray-proxy), except that the client is launched directly in the session.</p></body></html>"))
        self.label_17.setToolTip(_translate("Frame", "<html><head/><body><p>Command-line options are incompatible with robust session management for a variety of reasons, so the NSM server does not support them directly.</p><p>Some audio programs doesn\'t have NSM implementation yet, but they can have a LASH/LADISH implementation, and we can use it for the save signal.</p><p>Be warned that referring to files outside of the session directory will impair your ability to reliably archive and transport sessions. <br/><br/>Patching the program to use NSM natively will result in a better experience. </p></body></html>"))
        self.label_17.setText(_translate("Frame", "Executable :"))
        self.label_16.setToolTip(_translate("Frame", "<html><head/><body><p>The program will be started with its current directory being a uniquely named directory under the current session directory. </p><p>It is recommended that you only refer to files in the current directory.</p></body></html>"))
        self.label_16.setText(_translate("Frame", "Config File :"))
        self.label_18.setToolTip(_translate("Frame", "<html><head/><body><p>The environment variables $NSM_CLIENT_ID and $RAY_SESSION_NAME will contain the unique client ID (suitable for use as e.g. a JACK client name) and the display name for the session, respectively.<br/>The variable $CONFIG_FILE will contain the name of the config file selected above.</p></body></html>"))
        self.label_18.setText(_translate("Frame", "Arguments :"))
        self.labelWorkingDirTitle.setText(_translate("Frame", "Folder :"))
        self.lineEditArguments.setToolTip(_translate("Frame", "<html><head/><body><p>The environment variable $RAY_CLIENT_ID will contain the RaySession client_id of this client.$RAY_SESSION_NAME will contain the display name for the session.<br/>$RAY_JACK_CLIENT_NAME will contain a string suitable for use as e.g. a JACK client name.<br/>$CONFIG_FILE will contain the name of the config file selected above.</p></body></html>"))
        self.lineEditConfigFile.setToolTip(_translate("Frame", "<html><head/><body><p>The program will be started in the folder named above.</p><p>It is recommended that you only refer to files in the current directory.</p><p>$RAY_SESSION_NAME will be replaced with the name of the session.</p></body></html>"))
        self.toolButtonBrowse.setToolTip(_translate("Frame", "<html><head/><body><p>The program will be started with its current directory being a uniquely named directory under the current session directory. </p><p>It is recommended that you only refer to files in the current directory.</p></body></html>"))
        self.toolButtonBrowse.setText(_translate("Frame", "Browse"))
        self.toolButtonIcon.setText(_translate("Frame", "..."))
        self.lineEditExecutable.setToolTip(_translate("Frame", "<html><head/><body><p>Ray Hack protocol is a convenience way to manage non NSM compatible programs in the session.</p><p>Some audio programs don\'t have NSM implementation yet, but they can have a LASH/LADISH implementation, and we can use it for the save signal.</p><p>Be warned that referring to files outside of the session directory will impair your ability to reliably archive and transport sessions. <br/><br/>Patching the program to use NSM natively will result in a better experience. </p></body></html>"))
        self.labelWorkingDir.setText(_translate("Frame", "session_name.client_id"))
        self.checkBoxWaitWindow.setToolTip(_translate("Frame", "<html><head/><body><p>If wmctrl is present and compatible with window manager,</p><p>and if this box is checked,</p><p>the program will be considered as ready only when it displays a window.</p><p>Else the program will be considered as ready after 500ms.</p></body></html>"))
        self.checkBoxWaitWindow.setText(_translate("Frame", "wait for a window before considering it ready (needs wmctrl)"))
        self.label_19.setToolTip(_translate("Frame", "<html><head/><body><p>Most programs will shutdown gracefully when sent a SIGTERM or SIGINT signal.<br/>It\'s impossible to know which signal a specific program will respond to.<br/>A unhandled signal will simply kill the process, and may cause problems with the audio subsystem (e.g. JACK).<br/>Check the program\'s documentation or source code to determine which signal to use to stop it gracefully.</p></body></html>"))
        self.label_19.setText(_translate("Frame", "Stop Signal :"))
        self.label_20.setToolTip(_translate("Frame", "<html><head/><body><p>Some (very few) programs may respond to a specific Unix signal by somehow saving their state.</p><p>If \'Save Signal\' is set to something other than \'None\', then Ray Proxy will deliver the specified signal to the proxied process upon an NSM \'Save\' event.</p><p>If program is compatible with LASH/LADISH, save signal is SIGUSR1.</p><p>Most programs will treat these signals just like SIGTERM and die.</p><p>You have been warned.</p></body></html>"))
        self.label_20.setText(_translate("Frame", "Save Signal :"))
        self.comboSaveSig.setToolTip(_translate("Frame", "<html><head/><body><p>Some (very few) programs may respond to a specific Unix signal by somehow saving their state.</p><p>If \'Save Signal\' is set to something other than \'None\', then this signal will be sent to the program when we ask to save it.</p><p>If program is compatible with LASH/LADISH, save signal is SIGUSR1.</p><p>Most programs will treat these signals just like SIGTERM and die.</p><p>You have been warned.</p></body></html>"))
        self.comboStopSig.setToolTip(_translate("Frame", "<html><head/><body><p>Most programs will shutdown gracefully when sent a SIGTERM or SIGINT signal.<br/>It\'s impossible to know which signal a specific program will respond to.<br/>A unhandled signal will simply kill the process, and may cause problems with the audio subsystem (e.g. JACK).<br/>Check the program\'s documentation or source code to determine which signal to use to stop it gracefully.</p></body></html>"))
        self.groupBoxNoSave.setTitle(_translate("Frame", "Without save method"))
        self.checkBoxTellUser.setToolTip(_translate("Frame", "<html><head/><body><p>Because we have no method to save the state of this program,<br/>if this box is checked the program won\'t be closed by session manager at session close,</p><p>it will ask user to close it himself (saving changes or not).</p></body></html>"))
        self.checkBoxTellUser.setText(_translate("Frame", "Tell user to close program himself at session close"))
        self.checkBoxCloseGracefully.setToolTip(_translate("Frame", "<html><head/><body><p>If wmctrl is present and compatible with window manager,<br/>the program will try to close gracefully its windows before asking user to close them himself.<br/>This way, in a lot of cases, program will be closed when it has no unsaved changes,<br/>or will display an exit confirmation dialog to save changes or not.  </p></body></html>"))
        self.checkBoxCloseGracefully.setText(_translate("Frame", "Try to close window gracefully (needs wmctrl)"))
        self.groupBoxTestZone.setTitle(_translate("Frame", "Test &Zone"))
        self.pushButtonStart.setText(_translate("Frame", "Launch"))
        self.pushButtonStop.setText(_translate("Frame", "Stop"))
        self.lineEditClientStatus.setToolTip(_translate("Frame", "Status"))
        self.lineEditClientStatus.setText(_translate("Frame", "stopped"))
        self.pushButtonSave.setText(_translate("Frame", "Save"))
        self.labelError.setText(_translate("Frame", "executable failed to launch !"))

from surclassed_widgets import FakeToolButton, StatusBar
