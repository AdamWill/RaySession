#!/usr/bin/python3 -u


from PyQt5.QtWidgets import QApplication, QMainWindow, QMenu, QInputDialog, QBoxLayout, QListWidgetItem, QFrame, QDialog, QDialogButtonBox, QFileDialog, QMessageBox, QCompleter, QAction, QToolButton, QAbstractItemView, QLabel, QLineEdit
from PyQt5.QtGui import QIcon , QCursor, QPalette, QPixmap, QFontDatabase
from PyQt5.QtCore import QTimer, QProcess, pyqtSignal, pyqtSlot, QObject, QSize, Qt, QSettings, qDebug, QLocale, QTranslator

import sys
from liblo import *
import subprocess
from signal import signal, SIGINT, SIGTERM, SIGUSR1, SIGUSR2
import signal
import unicodedata
import os
import socket
import time
import argparse

#import UIs
import ui_raysession
import ui_client_slot

import resources_rc

from gui_signaler import Signaler
from daemon_manager import DaemonManager
from child_dialogs import (
    OpenSessionDialog, NewSessionDialog, SaveTemplateSessionDialog,
    SaveTemplateClientDialog, EditExecutableDialog, ClientPropertiesDialog,
    ClientTrashDialog, AbortSessionDialog, AbortServerCopyDialog,
    AbortClientCopyDialog, OpenNsmSessionInfoDialog, QuitAppDialog,
    AboutRaySessionDialog, AddApplicationDialog, NewExecutableDialog,
    StopClientDialog, DaemonUrlWindow, ErrorDialog)
from gui_tools import (ArgParser, CommandLineArgs, settings, initGuiTools,
                       default_session_root, ErrDaemon, _translate)
from gui_server_thread import GUIServerThread
from gui_session import Session
from shared import *
from list_widget_clients import *
import nsm_client
import ray

signaler = Signaler.instance()

def str2bool(v):
    return bool(v.lower() == 'true')

def remove_accents(input_str):
    nfkd_form = unicodedata.normalize('NFKD', input_str)
    return u"".join([c for c in nfkd_form if not unicodedata.combining(c)]).lower()    

def signalHandler(sig, frame):
    if sig in (SIGINT, SIGTERM):
        if session._daemon_manager.launched_before:
            if CommandLineArgs.under_nsm and session.server_status != ray.ServerStatus.OFF:
                MainUI.terminate_request = True
                server.abortSession()
            else:
                daemon_manager.stop()
            return
        
        #MainUI.terminate_request = True
        #daemon_manager.stop()
        app.quit()

def changeRootFolder(parent_window):
    #this function is the only one that takes cares of files present on system (except config files). 
    #In a perfect world, this should be done in ray-daemon.
    #But it's more user friendly to use a file picker child of raysession window
    #and if ray-daemon is launched before, with a different session root, 
    #then it gives the advantage to not change the default root.
    
    global default_session_root
    root_folder = QFileDialog.getExistingDirectory(parent_window, 
                                                  _translate("root_folder_dialogs", "Choose root folder for sessions"), 
                                                  default_session_root, 
                                                  QFileDialog.ShowDirsOnly)
    
    #Security, kde dialogs sends $HOME if user type a folder path that doesn't already exists
    if os.environ['HOME'] and root_folder == os.environ['HOME']:
        return
    
    if root_folder:
        errorDialog = QMessageBox(QMessageBox.Critical, 
                                  _translate('root_folder_dialogs', 'unwritable dir'), 
                                  _translate('root_folder_dialogs', '<p>You have no permissions for %s,<br>choose another directory !</p>') % root_folder)
        
        if not os.path.exists(root_folder):
            try:
                os.makedirs(root_folder)
            except:
                errorDialog.exec()
                return
        
        if not os.access(root_folder, os.W_OK):
            errorDialog.exec()
            return
        
        default_session_root = root_folder
        settings.setValue('default_session_root', default_session_root)
        
        server.toDaemon('/ray/server/change_root', root_folder)

class TrashedClient(object):
    def __init__(self, client_data, menu_action):
        self.data        = client_data
        self.menu_action = menu_action
        


class NSMThread(nsm_client.NSMThread):
    def __init__(self, name, signaler, daemon_address, debug):
        nsm_client.NSMThread.__init__(self, name, signaler, daemon_address, debug)
        
    @make_method('/nsm/client/list_session_templates', '')
    def listSessionTemplates(self, path, args, types, src_addr):
        pass
    
    @make_method('/nsm/client/save_as_template', 's')
    def saveAsTemplate(self, path, args, types, src_addr):
        server.saveTemplateSession(args[0])
    
    @make_method('/nsm/client/duplicate', 's')
    def duplicate(self, path, args, types, src_addr):
        pass
    
class NSMChild(QObject):
    def __init__(self):
        QObject.__init__(self)
        self.nsm_signaler = nsm_client.NSMSignaler()
        self.nsm_signaler.server_sends_open.connect(self.open)
        self.nsm_signaler.server_sends_save.connect(self.save)
        self.nsm_signaler.show_optional_gui.connect(self.showOptionalGui)
        self.nsm_signaler.hide_optional_gui.connect(self.hideOptionalGui)
        
        self.wait_for_open = False
        self.wait_for_save = False
        self.project_path  = ''
        
        self.serverNSM = NSMThread('raysession_child', self.nsm_signaler, parent_daemon_address, debug)        
        self.serverNSM.start()
        
        signaler.daemon_announce_ok.connect(self.announceToParent)
        signaler.server_status_changed.connect(self.serverStatusChanged)
    
    def announceToParent(self):
        self.serverNSM.announce(_translate('child_session', 'Child Session'), ':switch:optional-gui:', 'raysession')
    
    def serverStatusChanged(self, server_status):
        if server_status == ray.ServerStatus.READY:
            if self.wait_for_open:
                self.serverNSM.openReply()
                self.wait_for_open = False
            
            elif self.wait_for_save:
                self.serverNSM.saveReply()
                self.wait_for_save = False
    
    def open(self, project_path, session_name, jack_client_name):
        self.wait_for_open = True
        self.project_path  = project_path
        
        server.openSession(project_path)
    
    def save(self):
        MainUI.saveWindowSettings()
        
        self.wait_for_save = True
        server.saveSession()
        
    def showOptionalGui(self):
        MainUI.show()
        self.serverNSM.sendGuiState(True)
        
    def hideOptionalGui(self):
        MainUI.hide()
        self.serverNSM.sendGuiState(False)
        
class NSMChildOutside(NSMChild):
    def __init__(self):
        NSMChild.__init__(self)
        self.wait_for_close = False
        
        self.session_name = ''
        self.template_name = ''
        
    def announceToParent(self):
        self.serverNSM.announce(_translate('network_session', 'Network Session'), ':switch:optional-gui:ray-network:', 'ray-network')
        self.serverNSM.sendToDaemon('/nsm/client/network_properties', daemon_manager.url, daemon_manager.session_root)
    
    def save(self):
        self.serverNSM.sendToDaemon('/nsm/client/network_properties', daemon_manager.url, daemon_manager.session_root)
        NSMChild.save(self)
        
    def open(self, project_path, session_name, jack_client_name):
        self.wait_for_open = True
        
        #Here project_path is used for template if needed
        self.template_name = project_path
        self.session_name  = session_name
        
        server.openSession(self.session_name, self.template_name)
        
    def closeSession(self):
        self.wait_for_close = True
        server.closeSession()
        
    
if __name__ == '__main__':
    #connect signals
    signal.signal(signal.SIGINT , signalHandler)
    signal.signal(signal.SIGTERM, signalHandler)
    
    #set Qt Application
    app = QApplication(sys.argv)
    app.setApplicationName("RaySession")
    app.setApplicationVersion(VERSION)
    app.setOrganizationName("RaySession")
    app.setWindowIcon(QIcon(':/scalable/raysession.svg'))
    app.setQuitOnLastWindowClosed(False)
    
    ### Translation process
    locale = QLocale.system().name()
    appTranslator = QTranslator()
    if appTranslator.load("%s/locale/raysession_%s" % (os.path.dirname(os.path.dirname(os.path.dirname(os.path.realpath(__file__)))), locale)):
        app.installTranslator(appTranslator)
    _translate = app.translate
    init_translation(_translate)
    
    
    QFontDatabase.addApplicationFont(":/fonts/Ubuntu-R.ttf")
    QFontDatabase.addApplicationFont(":fonts/Ubuntu-C.ttf")
    
    initGuiTools()
    
    #Add raysession/src/bin to $PATH to can use raysession after make, whitout install
    ray.addSelfBinToPath()
    
    #get arguments
    parser = ArgParser()
    
    #needed for signals SIGINT, SIGTERM
    timer = QTimer()
    timer.start(200)
    timer.timeout.connect(lambda: None)
    
    #signaler = Signaler()
    
    ##build and configure daemon_manager object
    #daemon_manager = DaemonManager()
    
    #if CommandLineArgs.daemon_url:
        #daemon_manager.setOscAddress(CommandLineArgs.daemon_url)
    #elif not CommandLineArgs.out_daemon:
        #daemon_manager.setNewOscAddress()
    
    
    
    ##build and start liblo server
    #server = GUIServerThread(daemon_manager)
    #server.start()
    
    #build session
    server = GUIServerThread()
    session = Session()
    #server.start()
    #server = GUIServerThread(session)
    
    #if CommandLineArgs.under_nsm:
        #if CommandLineArgs.out_daemon:
            #nsm_child = NSMChildOutside()
            #daemon_manager.setExternal()
        #else:
            #nsm_child = NSMChild()
    
    ##build and show Main UI
    #MainUI = MainWindow()
    #MainUI.show()
    
    ##The only way I found to not show Messages Dock by default.
    #if not settings.value('MainWindow/ShowMessages', False, type=bool):
        #MainUI.hideMessagesDock()
    
    #daemon_manager.start()
        
    app.exec()
    
    #server.stop()
    #MainUI.hide()
    
    #del MainUI
    #session.quit()
    #server.stop()
    #del session
    #del app
