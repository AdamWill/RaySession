# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'resources/ui/proxy_gui.ui'
#
# Created by: PyQt5 UI code generator 5.11.3
#
# WARNING! All changes made in this file will be lost!

from PyQt5 import QtCore, QtGui, QtWidgets

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(463, 304)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setTitle("")
        self.groupBox.setObjectName("groupBox")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.groupBox)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.lineEditConfigFile = QtWidgets.QLineEdit(self.groupBox)
        self.lineEditConfigFile.setObjectName("lineEditConfigFile")
        self.gridLayout_3.addWidget(self.lineEditConfigFile, 1, 1, 1, 1)
        self.label_3 = QtWidgets.QLabel(self.groupBox)
        self.label_3.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_3.setObjectName("label_3")
        self.gridLayout_3.addWidget(self.label_3, 1, 0, 1, 1)
        self.label_2 = QtWidgets.QLabel(self.groupBox)
        self.label_2.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_2.setObjectName("label_2")
        self.gridLayout_3.addWidget(self.label_2, 0, 0, 1, 1)
        self.lineEditExecutable = QtWidgets.QLineEdit(self.groupBox)
        self.lineEditExecutable.setObjectName("lineEditExecutable")
        self.gridLayout_3.addWidget(self.lineEditExecutable, 0, 1, 1, 2)
        self.toolButtonBrowse = QtWidgets.QToolButton(self.groupBox)
        icon = QtGui.QIcon.fromTheme("folder-open")
        self.toolButtonBrowse.setIcon(icon)
        self.toolButtonBrowse.setToolButtonStyle(QtCore.Qt.ToolButtonTextBesideIcon)
        self.toolButtonBrowse.setObjectName("toolButtonBrowse")
        self.gridLayout_3.addWidget(self.toolButtonBrowse, 1, 2, 1, 1)
        self.label_5 = QtWidgets.QLabel(self.groupBox)
        self.label_5.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_5.setObjectName("label_5")
        self.gridLayout_3.addWidget(self.label_5, 2, 0, 1, 1)
        self.lineEditArguments = QtWidgets.QLineEdit(self.groupBox)
        self.lineEditArguments.setObjectName("lineEditArguments")
        self.gridLayout_3.addWidget(self.lineEditArguments, 2, 1, 1, 2)
        self.verticalLayout_2.addWidget(self.groupBox)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_2.addItem(spacerItem)
        self.groupBox_3 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_3.setTitle("")
        self.groupBox_3.setObjectName("groupBox_3")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.groupBox_3)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.comboSaveSig = QtWidgets.QComboBox(self.groupBox_3)
        self.comboSaveSig.setObjectName("comboSaveSig")
        self.gridLayout_2.addWidget(self.comboSaveSig, 0, 1, 1, 1)
        self.comboStopSig = QtWidgets.QComboBox(self.groupBox_3)
        self.comboStopSig.setObjectName("comboStopSig")
        self.gridLayout_2.addWidget(self.comboStopSig, 1, 1, 1, 1)
        self.label_8 = QtWidgets.QLabel(self.groupBox_3)
        self.label_8.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_8.setObjectName("label_8")
        self.gridLayout_2.addWidget(self.label_8, 0, 0, 1, 1)
        self.label_10 = QtWidgets.QLabel(self.groupBox_3)
        self.label_10.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_10.setObjectName("label_10")
        self.gridLayout_2.addWidget(self.label_10, 1, 0, 1, 1)
        self.toolButtonTestSave = QtWidgets.QToolButton(self.groupBox_3)
        icon = QtGui.QIcon.fromTheme("send-to-symbolic")
        self.toolButtonTestSave.setIcon(icon)
        self.toolButtonTestSave.setToolButtonStyle(QtCore.Qt.ToolButtonTextBesideIcon)
        self.toolButtonTestSave.setObjectName("toolButtonTestSave")
        self.gridLayout_2.addWidget(self.toolButtonTestSave, 0, 2, 1, 1)
        self.checkBoxWaitWindow = QtWidgets.QCheckBox(self.groupBox_3)
        self.checkBoxWaitWindow.setObjectName("checkBoxWaitWindow")
        self.gridLayout_2.addWidget(self.checkBoxWaitWindow, 2, 0, 1, 3)
        self.verticalLayout_2.addWidget(self.groupBox_3)
        self.labelError = QtWidgets.QLabel(self.centralwidget)
        self.labelError.setStyleSheet("color: red")
        self.labelError.setAlignment(QtCore.Qt.AlignCenter)
        self.labelError.setObjectName("labelError")
        self.verticalLayout_2.addWidget(self.labelError)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem1)
        self.pushButtonStart = QtWidgets.QPushButton(self.centralwidget)
        icon = QtGui.QIcon.fromTheme("media-playback-start")
        self.pushButtonStart.setIcon(icon)
        self.pushButtonStart.setObjectName("pushButtonStart")
        self.horizontalLayout.addWidget(self.pushButtonStart)
        self.pushButtonStop = QtWidgets.QPushButton(self.centralwidget)
        icon = QtGui.QIcon.fromTheme("media-playback-stop")
        self.pushButtonStop.setIcon(icon)
        self.pushButtonStop.setObjectName("pushButtonStop")
        self.horizontalLayout.addWidget(self.pushButtonStop)
        self.verticalLayout_2.addLayout(self.horizontalLayout)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Ray Proxy"))
        self.groupBox.setToolTip(_translate("MainWindow", "<html><head/><body><p>Command-line options are incompatible with robust session management for a variety of reasons, so the NSM server does not support them directly.</p><p>Some audio programs doesn\'t have NSM implementation yet, but they can have a LASH/LADISH implementation, and we can use it for the save signal.</p><p>Be warned that referring to files outside of the session directory will impair your ability to reliably archive and transport sessions. <br/><br/>Patching the program to use NSM natively will result in a better experience. </p></body></html>"))
        self.lineEditConfigFile.setToolTip(_translate("MainWindow", "<html><head/><body><p>The program will be started with its current directory being a uniquely named directory under the current session directory. </p><p>It is recommended that you only refer to files in the current directory.</p></body></html>"))
        self.label_3.setToolTip(_translate("MainWindow", "<html><head/><body><p>The program will be started with its current directory being a uniquely named directory under the current session directory. </p><p>It is recommended that you only refer to files in the current directory.</p></body></html>"))
        self.label_3.setText(_translate("MainWindow", "Config File :"))
        self.label_2.setToolTip(_translate("MainWindow", "<html><head/><body><p>Command-line options are incompatible with robust session management for a variety of reasons, so the NSM server does not support them directly.</p><p>Some audio programs doesn\'t have NSM implementation yet, but they can have a LASH/LADISH implementation, and we can use it for the save signal.</p><p>Be warned that referring to files outside of the session directory will impair your ability to reliably archive and transport sessions. <br/><br/>Patching the program to use NSM natively will result in a better experience. </p></body></html>"))
        self.label_2.setText(_translate("MainWindow", "Executable :"))
        self.lineEditExecutable.setToolTip(_translate("MainWindow", "<html><head/><body><p>Command-line options are incompatible with robust session management for a variety of reasons, so the NSM server does not support them directly.</p><p>Some audio programs doesn\'t have NSM implementation yet, but they can have a LASH/LADISH implementation, and we can use it for the save signal.</p><p>Be warned that referring to files outside of the session directory will impair your ability to reliably archive and transport sessions. <br/><br/>Patching the program to use NSM natively will result in a better experience. </p></body></html>"))
        self.toolButtonBrowse.setToolTip(_translate("MainWindow", "<html><head/><body><p>The program will be started with its current directory being a uniquely named directory under the current session directory. </p><p>It is recommended that you only refer to files in the current directory.</p></body></html>"))
        self.toolButtonBrowse.setText(_translate("MainWindow", "Browse"))
        self.label_5.setToolTip(_translate("MainWindow", "<html><head/><body><p>The environment variables $NSM_CLIENT_ID and $RAY_SESSION_NAME will contain the unique client ID (suitable for use as e.g. a JACK client name) and the display name for the session, respectively.<br/>The variable $CONFIG_FILE will contain the name of the config file selected above.</p></body></html>"))
        self.label_5.setText(_translate("MainWindow", "Arguments :"))
        self.lineEditArguments.setToolTip(_translate("MainWindow", "<html><head/><body><p>The environment variables $NSM_CLIENT_ID and $RAY_SESSION_NAME will contain the unique client ID (suitable for use as e.g. a JACK client name) and the display name for the session, respectively.<br/>The variable $CONFIG_FILE will contain the name of the config file selected above.</p></body></html>"))
        self.comboSaveSig.setToolTip(_translate("MainWindow", "<html><head/><body><p>Some (very few) programs may respond to a specific Unix signal by somehow saving their state.</p><p>If \'Save Signal\' is set to something other than \'None\', then Ray Proxy will deliver the specified signal to the proxied process upon an NSM \'Save\' event.</p><p>If program is compatible with LASH/LADISH, save signal is SIGUSR1.</p><p>Most programs will treat these signals just like SIGTERM and die.</p><p>You have been warned.</p></body></html>"))
        self.comboStopSig.setToolTip(_translate("MainWindow", "<html><head/><body><p>Most programs will shutdown gracefully when sent a SIGTERM or SIGINT signal.<br/>It\'s impossible to know which signal a specific program will respond to.<br/>A unhandled signal will simply kill the process, and may cause problems with the audio subsystem (e.g. JACK).<br/>Check the program\'s documentation or source code to determine which signal to use to stop it gracefully.</p></body></html>"))
        self.label_8.setToolTip(_translate("MainWindow", "<html><head/><body><p>Some (very few) programs may respond to a specific Unix signal by somehow saving their state.</p><p>If \'Save Signal\' is set to something other than \'None\', then Ray Proxy will deliver the specified signal to the proxied process upon an NSM \'Save\' event.</p><p>If program is compatible with LASH/LADISH, save signal is SIGUSR1.</p><p>Most programs will treat these signals just like SIGTERM and die.</p><p>You have been warned.</p></body></html>"))
        self.label_8.setText(_translate("MainWindow", "Save Signal :"))
        self.label_10.setToolTip(_translate("MainWindow", "<html><head/><body><p>Most programs will shutdown gracefully when sent a SIGTERM or SIGINT signal.<br/>It\'s impossible to know which signal a specific program will respond to.<br/>A unhandled signal will simply kill the process, and may cause problems with the audio subsystem (e.g. JACK).<br/>Check the program\'s documentation or source code to determine which signal to use to stop it gracefully.</p></body></html>"))
        self.label_10.setText(_translate("MainWindow", "Stop Signal :"))
        self.toolButtonTestSave.setText(_translate("MainWindow", "Test"))
        self.checkBoxWaitWindow.setText(_translate("MainWindow", "Wait window before reply (needs wmctrl)"))
        self.labelError.setText(_translate("MainWindow", "executable failed to launch !"))
        self.pushButtonStart.setText(_translate("MainWindow", "Launch"))
        self.pushButtonStop.setText(_translate("MainWindow", "Stop"))

