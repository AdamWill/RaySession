#!/usr/bin/python3 -u

from PyQt5.QtCore import QCoreApplication, QObject, QTimer, pyqtSignal
from PyQt5.QtXml import QDomDocument
import sys, signal, os, time

from shared import *
import nsm_client


file_path = ""
saved_windows = []

def signalHandler(sig, frame):
    if sig in (signal.SIGINT, signal.SIGTERM):
        app.quit()

def getDaemonPid(port):
    xml = QDomDocument()
    try:
        file = open('/tmp/RaySession/multi-daemon.xml', 'r')
    except:
        return 0
    
    xml.setContent(file.read())
    
    xml_content = xml.documentElement()
    node = xml_content.firstChild()
    
    while not node.isNull():
        dxe = node.toElement()
        port_num = dxe.attribute('port')
        pid      = dxe.attribute('pid')
        
        if port_num.isdigit() and int(port_num) == port:
            if pid.isdigit():
                return int(pid)
            else:
                return 0
        
        node = node.nextSibling()
    else:
        return 0

def isChildOfDaemon(pid):
    if daemon_pid == 0:
        return True
    
    if pid < daemon_pid:
        return False
    
    ppid = pid
    
    while ppid > daemon_pid and ppid > 1:
        try:
            ppid = int(subprocess.check_output(['ps', '-o', 'ppid=', '-p', str(ppid)]))
        except:
            return False
        
    if ppid == daemon_pid:
        return True
    
    return False

class Signaler(nsm_client.NSMSignaler):
    pass

class WindowProperties(object):
    id      = ""
    desktop = 0
    pid     = 0
    wclass  = ""
    name    = ""

def moveWin(win_id, desktop_from, desktop_to):
    if desktop_from == desktop_to:
        return
    
    if desktop_to == -1:
        subprocess.run(['wmctrl', 'i', '-r', win_id, '-b', 'add,sticky'])
        return
    
    if desktop_from == -1:
        subprocess.run(['wmctrl', 'i', '-r', win_id, '-b', 'remove,sticky'])
        
    subprocess.run(['wmctrl', '-i', '-r', win_id, '-t', str(desktop_to)])

def getActiveWindowList():
    active_window_list = []
    
    try:
        wmctrl_all = subprocess.check_output(['wmctrl', '-l', '-p', '-x']).decode()
    except:
        sys.stderr.write('unable to use wmctrl')
        app.quit()
        return None
    
    all_lines = wmctrl_all.split('\n')
    
    for line in all_lines:
        if not line:
            continue
        
        line_sep = line.split(' ')
        properties = []
        for el in line_sep:
            if el:
                properties.append(el)
                
        if len(properties) >= 5 and properties[1].lstrip('-').isdigit() and properties[2].isdigit():
            pid = int(properties[2])
            if not isChildOfDaemon(pid):
                continue
            
            wid     = properties[0]
            desktop = int(properties[1])
            wclass  = properties[3]
            
            name = ""
            for prop in properties[4:]:
                name+=prop
                name+=" "
            name = name[:-1] #remove last space
            
            awin = WindowProperties()
            awin.id      = wid
            awin.pid     = pid
            awin.desktop = desktop
            awin.wclass  = wclass
            awin.name    = name
            
            active_window_list.append(awin)
            
    return active_window_list

def openFile(project_path, session_name, full_client_id):
    saved_windows.clear()
    
    global file_path
    file_path = "%s.xml" % project_path
    
    if os.path.isfile(file_path):
        try:
            file = open(file_path, 'r')
        except:
            print('unable to read file %s' % file_path, file=sys.stderr)
            app.quit()
            return
            
        xml = QDomDocument()
        xml.setContent(file.read())
        
        content = xml.documentElement()
        
        if content.tagName() != "RAY-WINDOWS":
            file.close()
            NSMServer.openReply()
            return
        
        cte = content.toElement()
        node = cte.firstChild()
        
        while not node.isNull():
            el = node.toElement()
            if el.tagName() != "window":
                continue
            
            win = WindowProperties()
            
            win.wclass  = el.attribute('class')
            win.name    = el.attribute('name')
            
            desktop = el.attribute('desktop')
            if desktop.lstrip('-').isdigit():
                win.desktop = int(desktop)
            
            saved_windows.append(win)
            
            node = node.nextSibling()
        
    NSMServer.openReply()
    
def saveFile():
    if not file_path:
        return
    
    try:
        file = open(file_path, 'w')
    except:
        print('unable to write file %s' % file_path, file=sys.stderr)
        app.quit()
        return
    
    active_window_list = getActiveWindowList()
    if active_window_list == None:
        return
    
    for awin in active_window_list:
        for win in saved_windows:
            if win.wclass == awin.wclass and win.name == awin.name:
                win.desktop = awin.desktop
                break
        else:
            win = WindowProperties()
            win.id      = awin.id
            win.desktop = awin.desktop
            win.wclass  = awin.wclass
            win.name    = awin.name
            
            saved_windows.append(win)
            
    
    xml = QDomDocument()
    p = xml.createElement('RAY-WINDOWS')
    
    for win in saved_windows:
        wt = xml.createElement('window')
        wt.setAttribute('class', win.wclass)
        wt.setAttribute('name', win.name)
        wt.setAttribute('desktop', win.desktop)
        p.appendChild(wt)
        
    xml.appendChild(p)
    
    file.write(xml.toString())
    file.close()
    
    NSMServer.saveReply()

def sessionIsLoaded():
    if not saved_windows:
        return
    
    active_window_list = getActiveWindowList()
    if not active_window_list:
        return
    
    
    for win in saved_windows:
        for awin in active_window_list:
            if awin.wclass == win.wclass and awin.name == win.name:
                win.id = awin.id
                moveWin(awin.id, awin.desktop, win.desktop)
                break
            
            
            
            
            
            
    
    

if __name__ == '__main__':
    NSM_URL = os.getenv('NSM_URL')
    if not NSM_URL:
        print('Could not register as NSM client.', file=sys.stderr)
        sys.exit()
    
    daemon_address = getLibloAddress(NSM_URL)
    
    signaler = Signaler()
    signaler.server_sends_open.connect(openFile)
    signaler.server_sends_save.connect(saveFile)
    signaler.session_is_loaded.connect(sessionIsLoaded)
    
    NSMServer = nsm_client.NSMThread('ray-wmctrl', signaler, daemon_address, False)
    NSMServer.start()
    NSMServer.announce('Windows Positions', ':switch:', 'ray-wmctrl')
    
    #connect signals
    signal.signal(signal.SIGINT , signalHandler)
    signal.signal(signal.SIGTERM, signalHandler)
            
    app = QCoreApplication(sys.argv)
    
    #get pid of the main daemon via its port
    daemon_pid = getDaemonPid(daemon_address.port)
    
    #needed for signals SIGINT, SIGTERM
    timer = QTimer()
    timer.start(200)
    timer.timeout.connect(lambda: None)
    
    app.exec()
