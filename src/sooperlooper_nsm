#!/usr/bin/python3 -u


import os, sys, time, signal
from liblo import ServerThread, Address, make_method, Message
from PyQt5.QtCore import QCoreApplication, pyqtSignal, QObject, QTimer, QProcess, QSettings, QLocale, QTranslator, QFile
#from PyQt5.QtWidgets import QApplication, QDialog, QFileDialog, QMessageBox, QMainWindow
from PyQt5.QtXml import QDomDocument

from shared import *
import nsm_client

def signalHandler(sig, frame):
    if sig in (signal.SIGINT, signal.SIGTERM):
        general_object.leave()
        
class SlOSCThread(nsm_client.NSMThread):
    def __init__(self, name, signaler, daemon_address, debug):
        nsm_client.NSMThread.__init__(self, name, signaler, daemon_address, debug)
        self.sl_is_ready = False
        
    @make_method('/pongSL', 'ssi')
    def pong(self, path, args):
        self.sl_is_ready = True
        
        if general_object.wait_for_load:
            general_object.sl_ready.emit()
        
class GeneralObject(QObject):
    sl_ready = pyqtSignal()
    
    def __init__(self):
        QObject.__init__(self)
        
        self.sl_process  = QProcess()
        self.sl_process.setProcessChannelMode(QProcess.ForwardedChannels)
        self.sl_process.finished.connect(self.slProcessFinished)
        
        self.sl_port = getFreeOscPort(9951)
        self.sl_url = Address(self.sl_port)
        
        
        self.sl_process.start('sooperlooper', ['-p', str(self.sl_port)])
        
        self.gui_process = QProcess()
        self.gui_process.setProcessChannelMode(QProcess.ForwardedChannels)
        self.gui_process.started.connect(self.guiProcessStarted)
        self.gui_process.finished.connect(self.guiProcessFinished)
        
        self.project_path   = ''
        self.session_path   = ''
        self.session_name   = ''
        self.full_client_id = ''
        
        self.file_timer = QTimer()
        self.file_timer.setInterval(50)
        self.file_timer.timeout.connect(self.checkFile)
        self.n_file_timer  = 0
        self.file_exists   = False
        self.file_contents = None
        
        signaler.server_sends_open.connect(self.initialize)
        signaler.server_sends_save.connect(self.saveSlSession)
        signaler.show_optional_gui.connect(self.showOptionalGui)
        signaler.hide_optional_gui.connect(self.hideOptionalGui)
        
        self.sl_ready.connect(self.loadSession)
        
        self.leaving = False
        self.wait_for_load = False
        
        self.showOptionalGui()
        
        self.ping_timer = QTimer()
        self.ping_timer.setInterval(100)
        self.ping_timer.timeout.connect(self.pingSL)
        self.ping_timer.start()
    
    def pingSL(self):
        if server.sl_is_ready:
            self.ping_timer.stop()
        else:
            server.send(self.sl_url, '/ping', server.url, '/pongSL')
    
    def leave(self):
        self.leaving = True
        
        if self.gui_process.state():
            self.gui_process.terminate()
        else:
            if self.sl_process.state():
                server.send(self.sl_url, '/quit')
            else:
                app.quit()
    
    def isGuiShown(self):
        return bool(self.sl_process.state() == QProcess.Running)
    
    def slProcessFinished(self, exit_code):
        app.quit()
    
    def guiProcessStarted(self):
        server.sendGuiState(True)
    
    def guiProcessFinished(self, exit_code):
        if self.leaving:
            if self.sl_process.state():
                server.send(self.sl_url, '/quit')
            else:
                app.quit()
                
        server.sendGuiState(False)
    
    def startFileChecker(self):
        self.file_exists  = bool(os.path.exists(self.session_file))
        self.n_file_timer = 0
        
        if self.file_exists:
            try:
                file = open(self.session_file)
                self.file_contents = file.read()
            except:
                pass
        
        self.file_timer.start()
    
    def stopFileChecker(self):
        self.file_exists  = bool(os.path.exists(self.session_file))
        self.n_file_timer = 0
        self.file_timer.stop()
        
        self.xmlCorrection()
        
        server.saveReply()
        
    def checkFile(self):
        if self.n_file_timer > 20: #more than 1 second
            self.stopFileChecker()
            return
        
        if not self.file_exists:
            if os.path.exists(self.session_file):
                self.stopFileChecker()
                return
                
        else:
            try:
                file = open(self.session_file)
                file_contents = file.read()
                if file_contents != self.file_contents:
                    self.stopFileChecker()
                    return
                
                self.file_contents = file_contents
                
            except:
                pass
                
        
        self.n_file_timer+=1
     
    def xmlCorrection(self):
        try:
            sl_file = open(self.session_file)
        except:
            return
        
        xml = QDomDocument()
        xml.setContent(sl_file.read())
        
        sl_file.close()
        
        content = xml.documentElement()
        
        if content.tagName() != 'SLSession':
            return
        
        node = content.firstChild()
        while not node.isNull():
            if node.toElement().tagName() != 'Loopers':
                node = node.nextSibling()
                continue
            
            sub_node = node.toElement().firstChild()
            while not sub_node.isNull():
                element = sub_node.toElement()
                
                if element.tagName() != 'Looper':
                    sub_node = sub_node.nextSibling()
                    continue
                
                audio_file_name = str(element.attribute('loop_audio'))
                if audio_file_name.startswith("%s/" % self.project_path):
                    element.setAttribute('loop_audio', os.path.relpath(audio_file_name))
                    
                sub_node = sub_node.nextSibling()
                
            node = node.nextSibling()
        
        try:
            sl_file = open(self.session_file, 'w')
        except:
            return
        
        sl_file.write(xml.toString())
        sl_file.close()
        
    
    def initialize(self, project_path, session_name, full_client_id):
        self.project_path   = project_path
        self.session_name   = session_name
        self.full_client_id = full_client_id
        self.session_file = "%s/session.slsess" % self.project_path
        
        if not os.path.exists(self.project_path):
            os.makedirs(self.project_path)
        
        os.chdir(self.project_path)
        
        if server.sl_is_ready:
            self.loadSession()
        else:
            self.wait_for_load = True
        
        
    def loadSession(self):
        self.wait_for_load = False
        server.send(self.sl_url, '/load_session', self.session_file, server.url, '/re-load')
        server.openReply()
        
    def saveSlSession(self):
        self.startFileChecker()
        server.send(self.sl_url, '/save_session', self.session_file, server.url, '/re-save', 1)
         
    def showOptionalGui(self):
        if not self.gui_process.state():
            self.gui_process.start('slgui', ['-P', str(self.sl_port)])
        
    def hideOptionalGui(self):
        if self.gui_process.state():
            self.gui_process.terminate()
        
        
if __name__ == '__main__':
    NSM_URL = os.getenv('NSM_URL')
    if not NSM_URL:
        print('Could not register as NSM client.', file=sys.stderr)
        sys.exit()
        
    daemon_address = getLibloAddress(NSM_URL)
    
    signal.signal(signal.SIGINT,  signalHandler)
    signal.signal(signal.SIGTERM, signalHandler)
    
    app = QCoreApplication(sys.argv)
    app.setApplicationName("SooperLooperNSM")
    app.setOrganizationName("SooperLooperNSM")
    
    timer = QTimer()
    timer.setInterval(200)
    timer.timeout.connect(lambda: None)
    timer.start()
    
    signaler = nsm_client.NSMSignaler()
    
    server = SlOSCThread('sooperlooper_nsm', signaler, daemon_address, False)
    
    general_object = GeneralObject()
    
    server.start()
    server.announce('SooperLooper', ':optional-gui:switch:', 'sooperlooper_nsm')
    
    app.exec()
    
    server.stop()
    
    del server
    del app
