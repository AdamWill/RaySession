diff --git a/src/gui/patchcanvas/canvasbox.py b/src/gui/patchcanvas/canvasbox.py
index 669f1b9..4cef862 100644
--- a/src/gui/patchcanvas/canvasbox.py
+++ b/src/gui/patchcanvas/canvasbox.py
@@ -90,7 +90,8 @@ class TitleLine:
         if little:
             self.font.setWeight(QFont.Normal)
 
-        self.size = QFontMetrics(self.font).width(text)
+        self.size = theme.get_text_width(text)
+        #self.size = QFontMetrics(self.font).width(text)
 
     def reduce_pixel(self, reduce):
         self.font.setPixelSize(self.font.pixelSize() - reduce)
@@ -598,6 +599,7 @@ class CanvasBox(CanvasBoxAbstract):
                             title_lines.append(TitleLine(title, theme))
                     else:
                         titles = self.split_in_two('uuuu' + subtitle, subt_len)
+
                         for i in range(len(titles)):
                             title = titles[i]
                             if i == 0:
@@ -661,7 +663,7 @@ class CanvasBox(CanvasBoxAbstract):
             max_header_width = 50
             if self._plugin_inline != self.INLINE_DISPLAY_DISABLED:
                 max_header_width = 200
-
+            
             title_lines = self._split_title(i)
             
             title_line_y_start = 2 + font_size
@@ -771,7 +773,7 @@ class CanvasBox(CanvasBoxAbstract):
         #print('tt', self._group_name, self._current_port_mode, sizes_tuples)
         sizes_tuples.sort()
         area_size, lines_choice, one_column, title_on_side = sizes_tuples[0]
-
+        
         self._title_lines = self._split_title(lines_choice)
         
         header_height = all_title_templates[lines_choice]['header_height']
@@ -818,7 +820,7 @@ class CanvasBox(CanvasBoxAbstract):
         else:
             box_width = max(width_for_ports, header_width)
             box_height = header_height + height_for_ports
-            
+        
         return {'max_title_size': max_title_size,
                 'box_height': box_height,
                 'box_width': box_width,
@@ -1131,7 +1133,7 @@ class CanvasBox(CanvasBoxAbstract):
         self._current_port_mode = PORT_MODE_NULL
         for port in canvas.port_list:
             if port.group_id == self._group_id and port.port_id in self._port_list_ids:
-                # used to know present port modes (INPUT or OUTPUT)
+                # used to know present port modes (INPUT or OUTPUT or both)
                 self._current_port_mode |= port.port_mode
 
         port_types = [PORT_TYPE_AUDIO_JACK, PORT_TYPE_MIDI_JACK,
@@ -1154,35 +1156,45 @@ class CanvasBox(CanvasBoxAbstract):
         self._width_in = max_in_width
         self._width_out = max_out_width
 
-        titles_dict = self._choose_title_disposition(
-            height_for_ports, height_for_ports_one,
-            max_in_width, max_out_width)
-        max_title_size = titles_dict['max_title_size']
-        self._header_width = titles_dict['header_width']
-        header_height = titles_dict['header_height']
-        one_column = titles_dict['one_column']
-        box_width = titles_dict['box_width']
-        box_height = titles_dict['box_height']
-        self._ports_y_start = titles_dict['ports_y_start']
-
-        self._width = box_width
+        if not (self._wrapping or self._unwrapping):
+            titles_dict = self._choose_title_disposition(
+                height_for_ports, height_for_ports_one,
+                max_in_width, max_out_width)
+            max_title_size = titles_dict['max_title_size']
+            self._header_width = titles_dict['header_width']
+            self._header_height = titles_dict['header_height']
+            one_column = titles_dict['one_column']
+            box_width = titles_dict['box_width']
+            box_height = titles_dict['box_height']
+            self._ports_y_start = titles_dict['ports_y_start']
+
+            self._width = box_width
+        
+            # wrapped/unwrapped sizes
+            normal_height = box_height
+            normal_width = box_width
+            wrapped_height = self._ports_y_start + canvas.theme.port_height
+            wrapped_width = self._width
+            
+            if self._title_on_side:
+                wrapped_height = self._header_height
+                if self._current_port_mode == PORT_MODE_INPUT:
+                    wrapped_width -= self._width_in
+                elif self._current_port_mode == PORT_MODE_OUTPUT:
+                    wrapped_width -= self._width_out
+            
+        else:
+            normal_height = self._unwrapped_height
+            normal_width = self._unwrapped_width
+            wrapped_height = self._wrapped_height
+            wrapped_width = self._wrapped_width
+            
+            one_column = bool(
+                self._current_port_mode == PORT_MODE_OUTPUT + PORT_MODE_INPUT
+                and self._current_layout_mode == LAYOUT_HIGH)
+            
         last_in_pos += self._ports_y_start
         last_out_pos += self._ports_y_start
-        
-        # wrapped/unwrapped sizes
-        normal_height = box_height
-        normal_width = box_width
-        wrapped_height = self._ports_y_start + canvas.theme.port_height
-        wrapped_width = self._width
-
-        if self._title_on_side:
-            wrapped_height = header_height
-            if self._current_port_mode == PORT_MODE_INPUT:
-                wrapped_width -= self._width_in
-            elif self._current_port_mode == PORT_MODE_OUTPUT:
-                wrapped_width -= self._width_out
-        
-        self._header_height = header_height
 
         if self._wrapping:
             self._height = (normal_height
@@ -1222,7 +1234,8 @@ class CanvasBox(CanvasBoxAbstract):
                 else:
                     self._unwrap_triangle_pos = UNWRAP_BUTTON_CENTER
         
-        down_height = box_theme.fill_pen().widthF()
+        #down_height = box_theme.fill_pen().widthF()
+        down_height = 0
 
         self._wrapped_width = wrapped_width
         self._unwrapped_width = normal_width
diff --git a/src/gui/patchcanvas/canvasbox_abstract.py b/src/gui/patchcanvas/canvasbox_abstract.py
index ddf771f..e30496f 100644
--- a/src/gui/patchcanvas/canvasbox_abstract.py
+++ b/src/gui/patchcanvas/canvasbox_abstract.py
@@ -122,6 +122,10 @@ class CanvasBoxAbstract(QGraphicsItem):
         self._width_out = 0
         self._header_width = self._width
         self._header_height = 0
+        self._wrapped_width = 0
+        self._unwrapped_width = 0
+        self._wrapped_height = 0
+        self._unwrapped_height = 0
         self._height = self._header_height + 1
         self._ports_y_start = self._header_height
         self._ex_width = self._width
@@ -216,6 +220,7 @@ class CanvasBoxAbstract(QGraphicsItem):
 
         self._title_on_side = False
         self._restrict_title_lines = 0 # no title lines restriction
+        self._layout_may_have_changed = False
         self._layout_mode = LAYOUT_AUTO
         self._current_layout_mode = LAYOUT_LARGE
         self._title_under_icon = False
@@ -334,6 +339,7 @@ class CanvasBoxAbstract(QGraphicsItem):
             new_widget.setVisible(False)
 
         self._port_list_ids.append(port_id)
+        self._layout_may_have_changed = True
 
         return new_widget
 
@@ -346,6 +352,8 @@ class CanvasBoxAbstract(QGraphicsItem):
                 % port_id)
             return
 
+        self._layout_may_have_changed = True
+
         if not canvas.loading_items:
             if len(self._port_list_ids) > 0:
                 self.update_positions()
@@ -362,6 +370,8 @@ class CanvasBoxAbstract(QGraphicsItem):
         if self._wrapped:
             new_widget.setVisible(False)
 
+        self._layout_may_have_changed = True
+
         return new_widget
 
     def add_line_from_group(self, line, connection_id):
diff --git a/src/gui/patchcanvas/patchcanvas.py b/src/gui/patchcanvas/patchcanvas.py
index a031c6c..07ec8a0 100644
--- a/src/gui/patchcanvas/patchcanvas.py
+++ b/src/gui/patchcanvas/patchcanvas.py
@@ -20,6 +20,7 @@
 # ------------------------------------------------------------------------------------------------------------
 # Imports (Global)
 import sys
+import time
 from PyQt5.QtCore import (pyqtSlot, qCritical, qFatal, qWarning, QObject,
                           QPoint, QPointF, QRectF, QSettings, QTimer, pyqtSignal)
 
@@ -684,10 +685,15 @@ def join_group(group_id):
     QTimer.singleShot(0, canvas.scene.update)
 
 def redraw_all_groups():
+    last_time = time.time()
+    
     for group in canvas.group_list:
         for box in group.widgets:
             if box is not None:
                 box.update_positions()
+        now = time.time()
+        print('kk', group.group_name, now - last_time)
+        last_time = now
 
     if canvas.scene is None:
         return
@@ -1113,6 +1119,7 @@ def remove_portgroup(group_id, portgrp_id):
         return
 
     if box_widget is not None:
+        box_widget._layout_may_have_change = True
         box_widget.update_positions()
 
     QTimer.singleShot(0, canvas.scene.update)
diff --git a/src/gui/patchcanvas/theme.py b/src/gui/patchcanvas/theme.py
index 6e38dd1..c0ada5c 100644
--- a/src/gui/patchcanvas/theme.py
+++ b/src/gui/patchcanvas/theme.py
@@ -3,7 +3,7 @@ import json
 import os
 import sys
 
-from PyQt5.QtGui import QColor, QPen, QFont, QBrush
+from PyQt5.QtGui import QColor, QPen, QFont, QBrush, QFontMetricsF
 from PyQt5.QtCore import Qt, QTimer
 
 # from gui.patchcanvas import theme_default
@@ -115,6 +115,7 @@ class StyleAttributer:
 
         self._fill_pen = None
         self._font = None
+        self._font_metrics_cache = {}
 
     def set_attribute(self, attribute: str, value):
         err = False
@@ -299,6 +300,27 @@ class StyleAttributer:
         font_.setWeight(self.get_value_of('_font_width'))
         return font_
     
+    def get_text_width(self, string:str):
+        tot_size = 0.0
+        
+        for s in string:
+            if s in self._font_metrics_cache.keys():
+                tot_size += self._font_metrics_cache[s]
+            else:
+                letter_size = QFontMetricsF(self.font()).width(s)
+                self._font_metrics_cache[s] = letter_size
+                tot_size += letter_size
+        
+        return tot_size
+        
+        
+        #if string in self._font_metrics_cache.keys():
+            #return self._font_metrics_cache[string]
+        
+        #width = QFontMetricsF(self.font()).width(string)
+        #self._font_metrics_cache[string] = width
+        #return width
+    
     def port_offset(self):
         return self.get_value_of('_port_offset')
     
diff --git a/src/gui/patchcanvas/theme_manager.py b/src/gui/patchcanvas/theme_manager.py
index 19a2bab..e0835fe 100644
--- a/src/gui/patchcanvas/theme_manager.py
+++ b/src/gui/patchcanvas/theme_manager.py
@@ -41,16 +41,16 @@ class ThemeManager:
             self._last_modified = last_modified
 
     def _update_theme(self) -> bool:
-        print('zouliij', time.time())
-        
         conf = configparser.ConfigParser()
         try:
             # we don't need the file_list
             # it is just a convenience to mute conf.read
             file_list = conf.read(self.current_theme_file)
+        except configparser.DuplicateOptionError as e:
+            print_error(str(e) + '\n')
+            return False
         except:
-            sys.stderr.write('patchcanvas::theme:failed to open %s\n'
-                                 % self.current_theme_file)
+            print_error('failed to open %s\n' % self.current_theme_file)
             return False
         
         theme_dict = self._convert_configparser_object_to_dict(conf)
@@ -64,7 +64,6 @@ class ThemeManager:
         canvas.scene.update_theme()
         
         theme_ref = os.path.basename(os.path.dirname(self.current_theme_file))
-        print('jifjfjfj', time.time())
         canvas.callback(ACTION_THEME_CHANGED, 0, 0, theme_ref)
         return True
     
@@ -124,7 +123,6 @@ class ThemeManager:
         return True
     
     def list_themes(self) -> list:
-        print('lisst thme')
         themes_set = set()
         conf = configparser.ConfigParser()
         themes_dicts = []
@@ -150,7 +148,7 @@ class ThemeManager:
                 try:
                     conf.read(full_path)
                 except configparser.DuplicateOptionError as e:
-                    sys.stderr.write(str(e) + '\n')
+                    print_error(str(e) + '\n')
                     continue
                 except:
                     # TODO
