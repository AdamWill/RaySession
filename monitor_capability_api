
The NSM capability ':monitor:' gives informations about others running clients, especially their running state.
Client MUST check if server has the ':monitor:' capability.

when a client informs the NSM server that it has ':monitor:' capability,
server sends to it one following message per existing client:

/nsm/client/monitor/client_state s:client_id i:is_started

where 'is_started' is set to 1 if client is started, else 0

This message is sent just before the /nsm/client/open message.
If client wants to receive all these messages another time, it has to send to server :

/nsm/server/monitor_reset


At each event, this monitor client will receive

/nsm/client/monitor/client_event s:client_id s:event

where 'event' can be

client_started
client_joined
client_ready
client_saved
client_stopped_by_server
client_stopped_by_itself
client_removed
client_open_error
client_save_error
client_start_request
client_save_request
client_stop_request

'client_joined' event happens when client is joined to the session
from external, starting it with NSM_URL=server_url client_executable

in RaySession, 'client_removed' event happens when a client
is definitely removed from the trash.

Note that a monitor client doesn't receives /nsm/client/monitor_event if the event
concerns this monitor client.


-------------------------------------

In RaySession, there is also the possibility for an external program to become a monitor.
This allow to get informations on the session and be warned of session events without being a session client.
The program becomes a ray-daemon monitor with:

/ray/server/monitor_announce

it MUST disannounce before to be stopped with:

/ray/server/monitor_disannounce


It will receives the same messages than a monitor client, but for logical reasons,
'/nsm/client/monitor/' is substitued with '/ray/monitor/' in paths.

it receives client states and events at 
/ray/monitor/client_state s:client_id i:is_started
/ray/monitor/client_event s:client_id s:event
